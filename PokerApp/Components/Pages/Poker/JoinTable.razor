@page "/poker/join"
@rendermode InteractiveServer

@inject PokerGameService PokerGameService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

<PageTitle>Join Poker Table</PageTitle>

<h3>Join a Poker Table</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@joinModel" OnSubmit="@JoinTableHandler">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="tableCode" class="form-label">Table Code</label>
                        <InputText id="tableCode" @bind-Value="joinModel.TableCode" class="form-control" />
                        <ValidationMessage For="@(() => joinModel.TableCode)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Join Table</button>
                    <a href="/" class="btn btn-secondary">Cancel</a>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private class JoinTableModel
    {
        [Required(ErrorMessage = "Table code is required")]
        [StringLength(6, ErrorMessage = "Table code must be 6 digits", MinimumLength = 6)]
        public string TableCode { get; set; } = string.Empty;
    }

    private JoinTableModel joinModel = new();
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                userId = appUser.Id;
            }
            else
            {
                NavigationManager.NavigateTo("/Identity/Account/Login", true);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
    }

    private void JoinTableHandler(EditContext editContext)
    {
        if (editContext.Validate())
        {
            _ = JoinTableAsync();
        }
    }

    private async Task JoinTableAsync()
    {
        try
        {
            // First find the table by code
            var table = await DbContext.PokerTables
                .FirstOrDefaultAsync(t => t.TableCode == joinModel.TableCode && t.IsActive);

            if (table == null)
            {
                // Handle table not found
                // You could add error message display here
                return;
            }

            // Navigate to table selection page
            NavigationManager.NavigateTo($"/poker/table/{table.Id}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine(ex);
        }
    }
}